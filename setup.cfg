[metadata]
name = spacy-wrap
description = Wrappers for including pre-trained transformers in spaCy pipelines
author = Kenneth Enevoldsen
author_email = kennethcenevoldsen@gmail.com
license = MIT
version = 1.2.1
long_description = file: readme.md
long_description_content_type = text/markdown
classifiers =
    Development Status :: 5 - Production/Stable
    Environment :: Console
    Intended Audience :: Developers
    Intended Audience :: Science/Research
    Topic :: Scientific/Engineering
    Topic :: Scientific/Engineering :: Artificial Intelligence
    License :: OSI Approved :: MIT License
    Operating System :: POSIX :: Linux
    Operating System :: MacOS :: MacOS X
    Operating System :: Microsoft :: Windows
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8

[options]
packages = find:
include_package_data = true
python_requires = >=3.7
zip_safe = false
install_requires =
    spacy_transformers>=1.1.8,<1.2.0
    spacy>=3.2.1,<3.5.0
    thinc>=8.0.13,<8.2.0

setup_requires =
    setuptools

[options.extras_require]
cuda =
    cupy>=5.0.0b4
cuda80 =
    cupy-cuda80>=5.0.0b4
cuda90 =
    cupy-cuda90>=5.0.0b4
cuda91 =
    cupy-cuda91>=5.0.0b4
cuda92 =
    cupy-cuda92>=5.0.0b4
cuda100 =
    cupy-cuda100>=5.0.0b4
cuda101 =
    cupy-cuda101>=5.0.0b4
cuda102 =
    cupy-cuda102>=5.0.0b4
cuda110 =
    cupy-cuda110>=5.0.0b4
cuda111 =
    cupy-cuda111>=5.0.0b4
cuda112 =
    cupy-cuda112>=5.0.0b4

[options.entry_points]
spacy_factories =
    sequence_classification_transformer = spacy_wrap.pipeline_component_seq_clf:make_sequence_classification_transformer
    token_classification_transformer = spacy_wrap.pipeline_component_tok_clf:make_token_classification_transformer


spacy_architectures =
    SequenceClassificationTransformerModel.v1 = spacy_wrap:architectures.create_SequenceClassificationTransformerModel_v1
    TokenClassificationTransformerModel.v1 = spacy_wrap:architectures.create_TokenClassificationTransformerModel_v1

[bdist_wheel]
universal = true

[sdist]
formats = gztar

[mypy]
ignore_missing_imports = True
no_implicit_optional = True

[coverage:run]

[coverage:report]
omit =
    **/tests/*
    **/_vendorized/*
    **/about.py
exclude_lines =
    pragma: no cover
    # Don't complain about missing debug-only code:
    def __unicode__
    def __repr__
    if self\.debug
    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError
    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:
show_missing = True
